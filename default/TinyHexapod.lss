
TinyHexapod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000652  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800094  00800094  0000071a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000199  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f1c  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000348  00000000  00000000  000017ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000955  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000213  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c6  00000000  00000000  0000283f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	df c1       	rjmp	.+958    	; 0x3c6 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e5       	ldi	r30, 0x52	; 82
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 39       	cpi	r26, 0x94	; 148
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a4 e9       	ldi	r26, 0x94	; 148
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 3a       	cpi	r26, 0xAC	; 172
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	fd d1       	rcall	.+1018   	; 0x454 <main>
  5a:	f9 c2       	rjmp	.+1522   	; 0x64e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SIPO_send>:
Date : 01-08-2014
											*/


void SIPO_send(unsigned char var) // you may try to make these functions inline so that this might give a performance 
{									//boost by decreasing use of pointers and ram. but this will increase however increase
  5e:	20 e0       	ldi	r18, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  60:	34 e0       	ldi	r19, 0x04	; 4
									//size of the program, you have to keep that in mind.
	unsigned char i;
	
	for(i=0;i<8;i++)
	{
		if(var & (1<<7))
  62:	87 ff       	sbrs	r24, 7
  64:	02 c0       	rjmp	.+4      	; 0x6a <SIPO_send+0xc>
		SIPO |= (1<<SPIN);
  66:	93 9a       	sbi	0x12, 3	; 18
  68:	01 c0       	rjmp	.+2      	; 0x6c <SIPO_send+0xe>

		else 
		SIPO &= ~(1<<SPIN);
  6a:	93 98       	cbi	0x12, 3	; 18

		SIPO |= (1<<CLK);
  6c:	95 9a       	sbi	0x12, 5	; 18
  6e:	93 2f       	mov	r25, r19
  70:	9a 95       	dec	r25
  72:	f1 f7       	brne	.-4      	; 0x70 <SIPO_send+0x12>
		_delay_us(1); //can be reduced to 1us i have checked it
					//so our SIPO clock is 1/10us that is 100khz speed
					//80 us delay for 1 byte
		SIPO &= ~(1<<CLK);
  74:	95 98       	cbi	0x12, 5	; 18
  76:	93 2f       	mov	r25, r19
  78:	9a 95       	dec	r25
  7a:	f1 f7       	brne	.-4      	; 0x78 <SIPO_send+0x1a>
void SIPO_send(unsigned char var) // you may try to make these functions inline so that this might give a performance 
{									//boost by decreasing use of pointers and ram. but this will increase however increase
									//size of the program, you have to keep that in mind.
	unsigned char i;
	
	for(i=0;i<8;i++)
  7c:	2f 5f       	subi	r18, 0xFF	; 255
  7e:	28 30       	cpi	r18, 0x08	; 8
  80:	11 f0       	breq	.+4      	; 0x86 <SIPO_send+0x28>
					//so our SIPO clock is 1/10us that is 100khz speed
					//80 us delay for 1 byte
		SIPO &= ~(1<<CLK);
		_delay_us(1);

		var = var<<1;
  82:	88 0f       	add	r24, r24
  84:	ee cf       	rjmp	.-36     	; 0x62 <SIPO_send+0x4>
  86:	08 95       	ret

00000088 <send_nibble>:
	}	

}

void send_nibble(unsigned char x)  //try to make this also inline if necessary
{
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
	x |= (1<<en); // set en pin as 1
  8e:	94 e0       	ldi	r25, 0x04	; 4
  90:	f9 2e       	mov	r15, r25
  92:	f8 2a       	or	r15, r24
	
	SIPO_send(x); //send the data through SIPO
  94:	8f 2d       	mov	r24, r15
  96:	e3 df       	rcall	.-58     	; 0x5e <SIPO_send>
	
	SIPO |= (1<<STB); //after sending enable the STROBE so that data is now available on the data pins
  98:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	08 eb       	ldi	r16, 0xB8	; 184
  9c:	1b e0       	ldi	r17, 0x0B	; 11
  9e:	c8 01       	movw	r24, r16
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <send_nibble+0x18>

	_delay_ms(1); //give delay of 10ms for enable change CLK
	
	SIPO &= ~(1<<STB);//clear the strobe now
  a4:	96 98       	cbi	0x12, 6	; 18

	x &= ~(1<<en); // now make the enable pin of lcd as 0
		
	SIPO_send(x); // again send new data in which only enable pin state of lcd is changed
  a6:	8f 2d       	mov	r24, r15
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	d9 df       	rcall	.-78     	; 0x5e <SIPO_send>
					
	SIPO |= (1<<STB); //again set the strobe
  ac:	96 9a       	sbi	0x12, 6	; 18
  ae:	c8 01       	movw	r24, r16
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <send_nibble+0x28>
	_delay_ms(1); //delay 10ms
	SIPO &= ~(1<<STB); // clear the strobe
  b4:	96 98       	cbi	0x12, 6	; 18


		//to send a nibble 2 * 80us + 2 * 1ms = 2.16ms total delay
}
  b6:	1f 91       	pop	r17
  b8:	0f 91       	pop	r16
  ba:	ff 90       	pop	r15
  bc:	08 95       	ret

000000be <lcd_cmd>:

void lcd_cmd(unsigned char var)
{
  be:	1f 93       	push	r17
  c0:	18 2f       	mov	r17, r24

//send higher nibble
	x = 0xf0 & var; //get higher nibble into x  
	
	x &= ~(1<<rs); 	//set the rs pin as 0
	send_nibble(x); //enable pin clocking mechanism is contained in nibble fucntion
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	e1 df       	rcall	.-62     	; 0x88 <send_nibble>

//now send lower nibble
	x = 0xf0 & (var<<4);   // now repeat same process for lower nibble
	
	x &= ~(1<<rs); 	
	send_nibble(x);
  c6:	81 2f       	mov	r24, r17
  c8:	82 95       	swap	r24
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	dd df       	rcall	.-70     	; 0x88 <send_nibble>
	
//to send a cmd or data byte delay is 2 * 2.16ms = 4.32ms

//so data rate is 1/4.32ms = 231 char's /second ; good enough for our display
}
  ce:	1f 91       	pop	r17
  d0:	08 95       	ret

000000d2 <cmd>:
void data(unsigned char);

//Wrapper functions for compatibility
void cmd(unsigned char val)
{
	lcd_cmd(val);
  d2:	f5 df       	rcall	.-22     	; 0xbe <lcd_cmd>
}
  d4:	08 95       	ret

000000d6 <lcd_data>:




void lcd_data(unsigned char var)
{
  d6:	1f 93       	push	r17
  d8:	18 2f       	mov	r17, r24
	unsigned char x;

//send higher nibble
	x = 0xf0 & var;  
  da:	80 7f       	andi	r24, 0xF0	; 240
	
	x |= (1<<rs); 	
	send_nibble(x);
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	d4 df       	rcall	.-88     	; 0x88 <send_nibble>

//now send lower nibble
	x = 0xf0 & (var<<4);  
  e0:	12 95       	swap	r17
  e2:	10 7f       	andi	r17, 0xF0	; 240
	
	x |= (1<<rs); 	
	send_nibble(x);
  e4:	81 2f       	mov	r24, r17
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	cf df       	rcall	.-98     	; 0x88 <send_nibble>

	
}
  ea:	1f 91       	pop	r17
  ec:	08 95       	ret

000000ee <data>:
	lcd_cmd(val);
}

void data(unsigned char val)
{
	lcd_data(val);
  ee:	f3 df       	rcall	.-26     	; 0xd6 <lcd_data>
}
  f0:	08 95       	ret

000000f2 <lcd_init>:

	
}

void lcd_init()
{
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	1f 93       	push	r17

//setting SIPO pins as output
SIPODDR |= (1<<STB) | (1<<SPIN) | (1<<CLK);
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	88 66       	ori	r24, 0x68	; 104
  fc:	81 bb       	out	0x11, r24	; 17
  fe:	20 ed       	ldi	r18, 0xD0	; 208
 100:	37 e0       	ldi	r19, 0x07	; 7
 102:	4c e2       	ldi	r20, 0x2C	; 44
 104:	51 e0       	ldi	r21, 0x01	; 1
 106:	ca 01       	movw	r24, r20
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_init+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d1 f7       	brne	.-12     	; 0x106 <lcd_init+0x14>
void data(unsigned char);

//Wrapper functions for compatibility
void cmd(unsigned char val)
{
	lcd_cmd(val);
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	d4 df       	rcall	.-88     	; 0xbe <lcd_cmd>
 116:	28 e9       	ldi	r18, 0x98	; 152
 118:	e2 2e       	mov	r14, r18
 11a:	2a e3       	ldi	r18, 0x3A	; 58
 11c:	f2 2e       	mov	r15, r18
 11e:	c7 01       	movw	r24, r14
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x2e>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	cb df       	rcall	.-106    	; 0xbe <lcd_cmd>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 128:	18 ec       	ldi	r17, 0xC8	; 200
 12a:	81 2f       	mov	r24, r17
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x3a>
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	c5 df       	rcall	.-118    	; 0xbe <lcd_cmd>
 134:	81 2f       	mov	r24, r17
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_init+0x44>
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	c0 df       	rcall	.-128    	; 0xbe <lcd_cmd>
 13e:	81 2f       	mov	r24, r17
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x4e>
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	bb df       	rcall	.-138    	; 0xbe <lcd_cmd>
 148:	81 2f       	mov	r24, r17
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x58>
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	b6 df       	rcall	.-148    	; 0xbe <lcd_cmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	8c e2       	ldi	r24, 0x2C	; 44
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x64>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	b0 df       	rcall	.-160    	; 0xbe <lcd_cmd>
 15e:	c7 01       	movw	r24, r14
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init+0x6e>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	ab df       	rcall	.-170    	; 0xbe <lcd_cmd>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 168:	81 2f       	mov	r24, r17
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x78>
 16e:	8e e0       	ldi	r24, 0x0E	; 14
 170:	a6 df       	rcall	.-180    	; 0xbe <lcd_cmd>
 172:	81 2f       	mov	r24, r17
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_init+0x82>
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	a1 df       	rcall	.-190    	; 0xbe <lcd_cmd>
 17c:	1a 95       	dec	r17
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x8a>
	_delay_us(50);
	cmd(0x0e);//turn on display with 1DCB
	_delay_us(50);
	cmd(0x80);//set ddram address
	_delay_us(50);
}
 180:	1f 91       	pop	r17
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <lcd_clear>:


void lcd_clear()
{
	lcd_cmd(0x01);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	99 df       	rcall	.-206    	; 0xbe <lcd_cmd>
}
 18c:	08 95       	ret

0000018e <print>:
}



void print(char* sym,unsigned char startadd)
{
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	7c 01       	movw	r14, r24
 19c:	16 2f       	mov	r17, r22
	unsigned char i=0;

	if(startadd<0x80 || startadd>0xcf)
 19e:	86 2f       	mov	r24, r22
 1a0:	80 58       	subi	r24, 0x80	; 128
 1a2:	80 35       	cpi	r24, 0x50	; 80
 1a4:	c8 f4       	brcc	.+50     	; 0x1d8 <print+0x4a>
void data(unsigned char);

//Wrapper functions for compatibility
void cmd(unsigned char val)
{
	lcd_cmd(val);
 1a6:	86 2f       	mov	r24, r22
 1a8:	8a df       	rcall	.-236    	; 0xbe <lcd_cmd>
 1aa:	00 e0       	ldi	r16, 0x00	; 0
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <print+0x3e>
		cmd(startadd);

	while(sym[i]!='\0')
	{

		if(startadd==0x90)
 1ae:	10 39       	cpi	r17, 0x90	; 144
 1b0:	21 f4       	brne	.+8      	; 0x1ba <print+0x2c>
void data(unsigned char);

//Wrapper functions for compatibility
void cmd(unsigned char val)
{
	lcd_cmd(val);
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	84 df       	rcall	.-248    	; 0xbe <lcd_cmd>
 1b6:	10 ec       	ldi	r17, 0xC0	; 192
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <print+0x36>
		if(startadd==0x90)
		{
				cmd(0xc0);
				startadd=0xc0;
		}
		else if(startadd==0xD0)
 1ba:	10 3d       	cpi	r17, 0xD0	; 208
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <print+0x36>
void data(unsigned char);

//Wrapper functions for compatibility
void cmd(unsigned char val)
{
	lcd_cmd(val);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	7e df       	rcall	.-260    	; 0xbe <lcd_cmd>
 1c2:	10 e8       	ldi	r17, 0x80	; 128
}

void data(unsigned char val)
{
	lcd_data(val);
 1c4:	88 81       	ld	r24, Y
 1c6:	87 df       	rcall	.-242    	; 0xd6 <lcd_data>
			cmd(0x01);
			startadd=0x80;
		}
	
		data(sym[i]);
		i++;
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
		startadd++;
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
	if(startadd<0x80 || startadd>0xcf)
		return;
	else 
		cmd(startadd);

	while(sym[i]!='\0')
 1cc:	e7 01       	movw	r28, r14
 1ce:	c0 0f       	add	r28, r16
 1d0:	d1 1d       	adc	r29, r1
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	59 f7       	brne	.-42     	; 0x1ae <print+0x20>
		data(sym[i]);
		i++;
		startadd++;
	}

}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	08 95       	ret

000001e6 <printstack>:


}

void printstack()
{
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	int8_t i;
	for(i=top;i>=0;i--)
 1f0:	f0 90 91 00 	lds	r15, 0x0091
 1f4:	cf 2d       	mov	r28, r15
 1f6:	dd 27       	eor	r29, r29
 1f8:	c7 fd       	sbrc	r28, 7
 1fa:	d0 95       	com	r29
 1fc:	c8 56       	subi	r28, 0x68	; 104
 1fe:	df 4f       	sbci	r29, 0xFF	; 255
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	05 c0       	rjmp	.+10     	; 0x210 <printstack+0x2a>
	lcd_cmd(val);
}

void data(unsigned char val)
{
	lcd_data(val);
 206:	88 81       	ld	r24, Y
 208:	66 df       	rcall	.-308    	; 0xd6 <lcd_data>
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	21 97       	sbiw	r28, 0x01	; 1
}

void printstack()
{
	int8_t i;
	for(i=top;i>=0;i--)
 210:	8f 2d       	mov	r24, r15
 212:	80 1b       	sub	r24, r16
 214:	87 ff       	sbrs	r24, 7
 216:	f7 cf       	rjmp	.-18     	; 0x206 <printstack+0x20>
	data(stack[i]);
	top = -1; // re-initialize stack pointer
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	90 93 92 00 	sts	0x0092, r25
 220:	80 93 91 00 	sts	0x0091, r24
		
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	08 95       	ret

00000230 <initSoftPWM>:
typedef unsigned char uchar;

void initSoftPWM()
{
	//Approx 9Khz frequency; CTC mode OCF2 Interrupt, Triggers ISR at about 9Khz rate
	TCNT2 = 0;
 230:	14 bc       	out	0x24, r1	; 36
	OCR2 = 166;
 232:	86 ea       	ldi	r24, 0xA6	; 166
 234:	83 bd       	out	0x23, r24	; 35
	TCCR2 = (1<<WGM21) | (1<<CS21);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);
 23a:	89 b7       	in	r24, 0x39	; 57
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	89 bf       	out	0x39, r24	; 57
}
 240:	08 95       	ret

00000242 <servo_angle>:
volatile uchar motor1_duty=0, motor2_duty=0, motor3_duty=0;



uchar servo_angle(int angle)
{//to understand this conversion of angle to duty cycle refer to Servo_Test program
 242:	24 e6       	ldi	r18, 0x64	; 100
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	ac 01       	movw	r20, r24
 248:	42 9f       	mul	r20, r18
 24a:	c0 01       	movw	r24, r0
 24c:	43 9f       	mul	r20, r19
 24e:	90 0d       	add	r25, r0
 250:	52 9f       	mul	r21, r18
 252:	90 0d       	add	r25, r0
 254:	11 24       	eor	r1, r1
 256:	67 e7       	ldi	r22, 0x77	; 119
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	95 d1       	rcall	.+810    	; 0x586 <__divmodhi4>
 25c:	86 2f       	mov	r24, r22
 25e:	83 5f       	subi	r24, 0xF3	; 243
 260:	24 e6       	ldi	r18, 0x64	; 100
 262:	82 9f       	mul	r24, r18
 264:	c0 01       	movw	r24, r0
 266:	11 24       	eor	r1, r1
 268:	89 2f       	mov	r24, r25
 26a:	99 0f       	add	r25, r25
 26c:	99 0b       	sbc	r25, r25
		uchar val,duty;
		val = 13 + (angle*100)/375;
		duty = (val*100)/256; //calculate equivalent duty cycle from given angle
		return duty;
}
 26e:	08 95       	ret

00000270 <motor1>:
void motor1(uchar angle)
{
	static uchar last_value=190; //why i gave 190 as initialiser because since it is static
	//we have to initialise it but if i give zero and my first angle is 0 then it takes
	//no actiion
	if(angle == last_value)
 270:	8e 3b       	cpi	r24, 0xBE	; 190
 272:	21 f0       	breq	.+8      	; 0x27c <motor1+0xc>
		return;
	
	else
	{
		motor1_duty = servo_angle(angle);	
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	e5 df       	rcall	.-54     	; 0x242 <servo_angle>
 278:	80 93 95 00 	sts	0x0095, r24
 27c:	08 95       	ret

0000027e <motor2>:
}

void motor2(uchar angle)
{
	static uchar last_value=190;
	if(angle == last_value)
 27e:	8e 3b       	cpi	r24, 0xBE	; 190
 280:	21 f0       	breq	.+8      	; 0x28a <motor2+0xc>
		return;
	
	else
	{
		motor2_duty = servo_angle(angle);	
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	de df       	rcall	.-68     	; 0x242 <servo_angle>
 286:	80 93 96 00 	sts	0x0096, r24
 28a:	08 95       	ret

0000028c <motor3>:
}

void motor3(uchar angle)
{
	static uchar last_value=190;
	if(angle == last_value)
 28c:	8e 3b       	cpi	r24, 0xBE	; 190
 28e:	21 f0       	breq	.+8      	; 0x298 <motor3+0xc>
		return;
	
	else
	{
		motor3_duty = servo_angle(angle);	
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	d7 df       	rcall	.-82     	; 0x242 <servo_angle>
 294:	80 93 97 00 	sts	0x0097, r24
 298:	08 95       	ret

0000029a <ResetLegs>:
	}
}

void ResetLegs()
{
	motor1(30);
 29a:	8e e1       	ldi	r24, 0x1E	; 30
 29c:	e9 df       	rcall	.-46     	; 0x270 <motor1>
	motor2(30);
 29e:	8e e1       	ldi	r24, 0x1E	; 30
 2a0:	ee df       	rcall	.-36     	; 0x27e <motor2>
	motor3(30);
 2a2:	8e e1       	ldi	r24, 0x1E	; 30
 2a4:	f3 df       	rcall	.-26     	; 0x28c <motor3>
 2a6:	88 eb       	ldi	r24, 0xB8	; 184
 2a8:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2aa:	2c e2       	ldi	r18, 0x2C	; 44
 2ac:	31 e0       	ldi	r19, 0x01	; 1
 2ae:	f9 01       	movw	r30, r18
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <ResetLegs+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <ResetLegs+0x14>
	_delay_ms(300);
}
 2b8:	08 95       	ret

000002ba <StepFront>:
//motor2 is left
//motor3 is right
void StepFront()
{
#define delayms 300 //80 is minimum optimal value but 300 and 100 give good displacement per step
	motor1(18);
 2ba:	82 e1       	ldi	r24, 0x12	; 18
 2bc:	d9 df       	rcall	.-78     	; 0x270 <motor1>
 2be:	88 eb       	ldi	r24, 0xB8	; 184
 2c0:	9b e0       	ldi	r25, 0x0B	; 11
 2c2:	2c e2       	ldi	r18, 0x2C	; 44
 2c4:	31 e0       	ldi	r19, 0x01	; 1
 2c6:	f9 01       	movw	r30, r18
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <StepFront+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ce:	d9 f7       	brne	.-10     	; 0x2c6 <StepFront+0xc>
	_delay_ms(delayms);
	motor2(0);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	d5 df       	rcall	.-86     	; 0x27e <motor2>
 2d4:	88 eb       	ldi	r24, 0xB8	; 184
 2d6:	9b e0       	ldi	r25, 0x0B	; 11
 2d8:	2c e2       	ldi	r18, 0x2C	; 44
 2da:	31 e0       	ldi	r19, 0x01	; 1
 2dc:	f9 01       	movw	r30, r18
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <StepFront+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e4:	d9 f7       	brne	.-10     	; 0x2dc <StepFront+0x22>
	_delay_ms(delayms);
	motor3(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	d1 df       	rcall	.-94     	; 0x28c <motor3>
 2ea:	88 eb       	ldi	r24, 0xB8	; 184
 2ec:	9b e0       	ldi	r25, 0x0B	; 11
 2ee:	2c e2       	ldi	r18, 0x2C	; 44
 2f0:	31 e0       	ldi	r19, 0x01	; 1
 2f2:	f9 01       	movw	r30, r18
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <StepFront+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fa:	d9 f7       	brne	.-10     	; 0x2f2 <StepFront+0x38>
	_delay_ms(delayms);
	motor1(44);
 2fc:	8c e2       	ldi	r24, 0x2C	; 44
 2fe:	b8 df       	rcall	.-144    	; 0x270 <motor1>
 300:	88 eb       	ldi	r24, 0xB8	; 184
 302:	9b e0       	ldi	r25, 0x0B	; 11
 304:	2c e2       	ldi	r18, 0x2C	; 44
 306:	31 e0       	ldi	r19, 0x01	; 1
 308:	f9 01       	movw	r30, r18
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <StepFront+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 310:	d9 f7       	brne	.-10     	; 0x308 <StepFront+0x4e>
	_delay_ms(delayms);
	motor2(40);
 312:	88 e2       	ldi	r24, 0x28	; 40
 314:	b4 df       	rcall	.-152    	; 0x27e <motor2>
 316:	88 eb       	ldi	r24, 0xB8	; 184
 318:	9b e0       	ldi	r25, 0x0B	; 11
 31a:	2c e2       	ldi	r18, 0x2C	; 44
 31c:	31 e0       	ldi	r19, 0x01	; 1
 31e:	f9 01       	movw	r30, r18
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <StepFront+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 324:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 326:	d9 f7       	brne	.-10     	; 0x31e <StepFront+0x64>
	_delay_ms(delayms);
	motor3(40);
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	b0 df       	rcall	.-160    	; 0x28c <motor3>
 32c:	88 eb       	ldi	r24, 0xB8	; 184
 32e:	9b e0       	ldi	r25, 0x0B	; 11
 330:	2c e2       	ldi	r18, 0x2C	; 44
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	f9 01       	movw	r30, r18
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <StepFront+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33c:	d9 f7       	brne	.-10     	; 0x334 <StepFront+0x7a>
	_delay_ms(delayms);	
}
 33e:	08 95       	ret

00000340 <StepBack>:

void StepBack()
{
#define delayms 300
	motor1(44);
 340:	8c e2       	ldi	r24, 0x2C	; 44
 342:	96 df       	rcall	.-212    	; 0x270 <motor1>
 344:	88 eb       	ldi	r24, 0xB8	; 184
 346:	9b e0       	ldi	r25, 0x0B	; 11
 348:	2c e2       	ldi	r18, 0x2C	; 44
 34a:	31 e0       	ldi	r19, 0x01	; 1
 34c:	f9 01       	movw	r30, r18
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <StepBack+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 354:	d9 f7       	brne	.-10     	; 0x34c <StepBack+0xc>
	_delay_ms(delayms);
	motor2(0);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	92 df       	rcall	.-220    	; 0x27e <motor2>
 35a:	88 eb       	ldi	r24, 0xB8	; 184
 35c:	9b e0       	ldi	r25, 0x0B	; 11
 35e:	2c e2       	ldi	r18, 0x2C	; 44
 360:	31 e0       	ldi	r19, 0x01	; 1
 362:	f9 01       	movw	r30, r18
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <StepBack+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 368:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36a:	d9 f7       	brne	.-10     	; 0x362 <StepBack+0x22>
	_delay_ms(delayms);
	motor3(0);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	8e df       	rcall	.-228    	; 0x28c <motor3>
 370:	88 eb       	ldi	r24, 0xB8	; 184
 372:	9b e0       	ldi	r25, 0x0B	; 11
 374:	2c e2       	ldi	r18, 0x2C	; 44
 376:	31 e0       	ldi	r19, 0x01	; 1
 378:	f9 01       	movw	r30, r18
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <StepBack+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 37e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 380:	d9 f7       	brne	.-10     	; 0x378 <StepBack+0x38>
	_delay_ms(delayms);
	motor1(18);
 382:	82 e1       	ldi	r24, 0x12	; 18
 384:	75 df       	rcall	.-278    	; 0x270 <motor1>
 386:	88 eb       	ldi	r24, 0xB8	; 184
 388:	9b e0       	ldi	r25, 0x0B	; 11
 38a:	2c e2       	ldi	r18, 0x2C	; 44
 38c:	31 e0       	ldi	r19, 0x01	; 1
 38e:	f9 01       	movw	r30, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <StepBack+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 394:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 396:	d9 f7       	brne	.-10     	; 0x38e <StepBack+0x4e>
	_delay_ms(delayms);
	motor2(40);
 398:	88 e2       	ldi	r24, 0x28	; 40
 39a:	71 df       	rcall	.-286    	; 0x27e <motor2>
 39c:	88 eb       	ldi	r24, 0xB8	; 184
 39e:	9b e0       	ldi	r25, 0x0B	; 11
 3a0:	2c e2       	ldi	r18, 0x2C	; 44
 3a2:	31 e0       	ldi	r19, 0x01	; 1
 3a4:	f9 01       	movw	r30, r18
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <StepBack+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ac:	d9 f7       	brne	.-10     	; 0x3a4 <StepBack+0x64>
	_delay_ms(delayms);
	motor3(40);
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	6d df       	rcall	.-294    	; 0x28c <motor3>
 3b2:	88 eb       	ldi	r24, 0xB8	; 184
 3b4:	9b e0       	ldi	r25, 0x0B	; 11
 3b6:	2c e2       	ldi	r18, 0x2C	; 44
 3b8:	31 e0       	ldi	r19, 0x01	; 1
 3ba:	f9 01       	movw	r30, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <StepBack+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c2:	d9 f7       	brne	.-10     	; 0x3ba <StepBack+0x7a>
	_delay_ms(delayms);	
}
 3c4:	08 95       	ret

000003c6 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25

	

	if(motor1_duty == count)
 3d4:	90 91 95 00 	lds	r25, 0x0095
 3d8:	80 91 94 00 	lds	r24, 0x0094
 3dc:	98 17       	cp	r25, r24
 3de:	09 f4       	brne	.+2      	; 0x3e2 <__vector_3+0x1c>
	{
		PORTB &= ~(1<<motor1_pin);
 3e0:	c0 98       	cbi	0x18, 0	; 24
	}	

	if(motor2_duty == count)
 3e2:	90 91 96 00 	lds	r25, 0x0096
 3e6:	80 91 94 00 	lds	r24, 0x0094
 3ea:	98 17       	cp	r25, r24
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <__vector_3+0x2a>
	{
		PORTB &= ~(1<<motor2_pin);
 3ee:	c1 98       	cbi	0x18, 1	; 24
	}

	if(motor3_duty == count)
 3f0:	90 91 97 00 	lds	r25, 0x0097
 3f4:	80 91 94 00 	lds	r24, 0x0094
 3f8:	98 17       	cp	r25, r24
 3fa:	09 f4       	brne	.+2      	; 0x3fe <__vector_3+0x38>
	{
		PORTB &= ~(1<<motor3_pin);
 3fc:	c2 98       	cbi	0x18, 2	; 24
	}
	
	count++;
 3fe:	80 91 94 00 	lds	r24, 0x0094
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	80 93 94 00 	sts	0x0094, r24

	if(count == 100)
 408:	80 91 94 00 	lds	r24, 0x0094
 40c:	84 36       	cpi	r24, 0x64	; 100
 40e:	29 f4       	brne	.+10     	; 0x41a <__vector_3+0x54>
	{
		count = 0;
 410:	10 92 94 00 	sts	0x0094, r1
		PORTB |= (1<<motor1_pin);
 414:	c0 9a       	sbi	0x18, 0	; 24
		PORTB |= (1<<motor2_pin);
 416:	c1 9a       	sbi	0x18, 1	; 24
		PORTB |= (1<<motor3_pin);
 418:	c2 9a       	sbi	0x18, 2	; 24
	}

	
}
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <lcd_print>:
{
	lcd_cmd(0x01);
}

void lcd_print(char* msg,...)
{
 428:	df 93       	push	r29
 42a:	cf 93       	push	r28
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	2d 81       	ldd	r18, Y+5	; 0x05
 432:	3e 81       	ldd	r19, Y+6	; 0x06
	int x;
	va_list arg_list;//declare "arg_list" a variable of type va_list
	va_start(arg_list,msg);//initialize the variable with "va_start" which takes 
							//two arguments the list and first argument in this function		
	x=va_arg(arg_list,int);//when va_arg is called with the argument of list and a datatype 
 434:	6f 81       	ldd	r22, Y+7	; 0x07
 436:	78 85       	ldd	r23, Y+8	; 0x08
						// it returns next value of that type in the list if it exists
						//if it doesn't exist if returns NULL or 0 (tested in Turbo C)
	if(x>=0x80 && x<=0xcf)//so i don't want to check because i only want one argument to be
 438:	cb 01       	movw	r24, r22
 43a:	80 58       	subi	r24, 0x80	; 128
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	80 35       	cpi	r24, 0x50	; 80
 440:	91 05       	cpc	r25, r1
 442:	10 f4       	brcc	.+4      	; 0x448 <lcd_print+0x20>
	print(msg,x);	//optional so i directly get the address and specify which should be
 444:	c9 01       	movw	r24, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <lcd_print+0x24>
						//the next argument in the calling function(caller)
	
	else
	print(msg,0x80);
 448:	c9 01       	movw	r24, r18
 44a:	60 e8       	ldi	r22, 0x80	; 128
 44c:	a0 de       	rcall	.-704    	; 0x18e <print>

	va_end(arg_list); //clear the memory used by arg_list variable
}
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <main>:
void StepFront();
void StepBack();
void ResetLegs();

int main()
{
 454:	1f 93       	push	r17

	lcd_init();
 456:	4d de       	rcall	.-870    	; 0xf2 <lcd_init>
	lcd_print("Program Initialised");
 458:	00 d0       	rcall	.+0      	; 0x45a <main+0x6>
 45a:	80 e6       	ldi	r24, 0x60	; 96
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	ed b7       	in	r30, 0x3d	; 61
 460:	fe b7       	in	r31, 0x3e	; 62
 462:	92 83       	std	Z+2, r25	; 0x02
 464:	81 83       	std	Z+1, r24	; 0x01
 466:	e0 df       	rcall	.-64     	; 0x428 <lcd_print>

	DDRB =0xff;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	87 bb       	out	0x17, r24	; 23
typedef unsigned char uchar;

void initSoftPWM()
{
	//Approx 9Khz frequency; CTC mode OCF2 Interrupt, Triggers ISR at about 9Khz rate
	TCNT2 = 0;
 46c:	14 bc       	out	0x24, r1	; 36
	OCR2 = 166;
 46e:	86 ea       	ldi	r24, 0xA6	; 166
 470:	83 bd       	out	0x23, r24	; 35
	TCCR2 = (1<<WGM21) | (1<<CS21);
 472:	8a e0       	ldi	r24, 0x0A	; 10
 474:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);
 476:	89 b7       	in	r24, 0x39	; 57
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	89 bf       	out	0x39, r24	; 57
	DDRB =0xff;
	
	initSoftPWM();

	
	sei();
 47c:	78 94       	sei
	//init all motors
	ResetLegs();
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0b df       	rcall	.-490    	; 0x29a <ResetLegs>
 484:	80 e1       	ldi	r24, 0x10	; 16
 486:	97 e2       	ldi	r25, 0x27	; 39
 488:	2c e2       	ldi	r18, 0x2C	; 44
 48a:	31 e0       	ldi	r19, 0x01	; 1
 48c:	f9 01       	movw	r30, r18
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__stack+0x2f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 492:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 494:	d9 f7       	brne	.-10     	; 0x48c <__stack+0x2d>
	_delay_ms(1000);

	StepFront();	
 496:	11 df       	rcall	.-478    	; 0x2ba <StepFront>
 498:	10 e0       	ldi	r17, 0x00	; 0
	
	for(uint8_t i=0;i<10;i++)
		StepFront();
 49a:	0f df       	rcall	.-482    	; 0x2ba <StepFront>
	ResetLegs();
	_delay_ms(1000);

	StepFront();	
	
	for(uint8_t i=0;i<10;i++)
 49c:	1f 5f       	subi	r17, 0xFF	; 255
 49e:	1a 30       	cpi	r17, 0x0A	; 10
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__stack+0x3b>
 4a2:	10 e0       	ldi	r17, 0x00	; 0
		StepFront();
	for(uint8_t i=0;i<10;i++)
		StepBack();
 4a4:	4d df       	rcall	.-358    	; 0x340 <StepBack>

	StepFront();	
	
	for(uint8_t i=0;i<10;i++)
		StepFront();
	for(uint8_t i=0;i<10;i++)
 4a6:	1f 5f       	subi	r17, 0xFF	; 255
 4a8:	1a 30       	cpi	r17, 0x0A	; 10
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__stack+0x45>
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stack+0x4d>

000004ae <pop>:
	stack[top] = element;
}

unsigned char pop()
{
	if(top == -1)
 4ae:	20 91 91 00 	lds	r18, 0x0091
 4b2:	30 91 92 00 	lds	r19, 0x0092
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	2f 3f       	cpi	r18, 0xFF	; 255
 4ba:	38 07       	cpc	r19, r24
 4bc:	39 f4       	brne	.+14     	; 0x4cc <pop+0x1e>
	{
		lcd_print("Stack is empty", 0x80);
 4be:	84 e7       	ldi	r24, 0x74	; 116
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	60 e8       	ldi	r22, 0x80	; 128
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	b0 df       	rcall	.-160    	; 0x428 <lcd_print>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
		return 0;
	}
	return(stack[top--]);
 4cc:	f9 01       	movw	r30, r18
 4ce:	e8 56       	subi	r30, 0x68	; 104
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	80 81       	ld	r24, Z
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	30 40       	sbci	r19, 0x00	; 0
 4d8:	30 93 92 00 	sts	0x0092, r19
 4dc:	20 93 91 00 	sts	0x0091, r18

}
 4e0:	08 95       	ret

000004e2 <push>:
void push(unsigned char);
unsigned char pop();

void push(unsigned char element)
{
	if(top == (max-1))
 4e2:	e0 91 91 00 	lds	r30, 0x0091
 4e6:	f0 91 92 00 	lds	r31, 0x0092
 4ea:	e3 31       	cpi	r30, 0x13	; 19
 4ec:	f1 05       	cpc	r31, r1
 4ee:	31 f4       	brne	.+12     	; 0x4fc <push+0x1a>
	{
		lcd_print("Stack is full" ,0x80);
 4f0:	83 e8       	ldi	r24, 0x83	; 131
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	60 e8       	ldi	r22, 0x80	; 128
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	97 df       	rcall	.-210    	; 0x428 <lcd_print>
 4fa:	08 95       	ret
		return;
	}
	top = top+1;
 4fc:	31 96       	adiw	r30, 0x01	; 1
 4fe:	f0 93 92 00 	sts	0x0092, r31
 502:	e0 93 91 00 	sts	0x0091, r30
	stack[top] = element;
 506:	e8 56       	subi	r30, 0x68	; 104
 508:	ff 4f       	sbci	r31, 0xFF	; 255
 50a:	80 83       	st	Z, r24
 50c:	08 95       	ret

0000050e <lcd_printnum>:

}


void lcd_printnum(long int number)
{
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	7b 01       	movw	r14, r22
 518:	8c 01       	movw	r16, r24
	unsigned char temp=0;
	
	if(number == 0)
 51a:	61 15       	cp	r22, r1
 51c:	71 05       	cpc	r23, r1
 51e:	81 05       	cpc	r24, r1
 520:	91 05       	cpc	r25, r1
 522:	19 f4       	brne	.+6      	; 0x52a <lcd_printnum+0x1c>
	lcd_cmd(val);
}

void data(unsigned char val)
{
	lcd_data(val);
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	d7 dd       	rcall	.-1106   	; 0xd6 <lcd_data>
 528:	27 c0       	rjmp	.+78     	; 0x578 <lcd_printnum+0x6a>
	{
		data('0');
		return;
	}
	
	if(number < 0)
 52a:	97 ff       	sbrs	r25, 7
 52c:	0a c0       	rjmp	.+20     	; 0x542 <lcd_printnum+0x34>
	{	
		number = number * -1;
 52e:	10 95       	com	r17
 530:	00 95       	com	r16
 532:	f0 94       	com	r15
 534:	e0 94       	com	r14
 536:	e1 1c       	adc	r14, r1
 538:	f1 1c       	adc	r15, r1
 53a:	01 1d       	adc	r16, r1
 53c:	11 1d       	adc	r17, r1
	lcd_cmd(val);
}

void data(unsigned char val)
{
	lcd_data(val);
 53e:	8d e2       	ldi	r24, 0x2D	; 45
 540:	ca dd       	rcall	.-1132   	; 0xd6 <lcd_data>
		data('-');
	}
		
	while(number > 0)
	{	
		temp = number%10;
 542:	c8 01       	movw	r24, r16
 544:	b7 01       	movw	r22, r14
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	2e d0       	rcall	.+92     	; 0x5ac <__divmodsi4>
 550:	86 2f       	mov	r24, r22
		temp += 0x30;
		push(temp);
 552:	80 5d       	subi	r24, 0xD0	; 208
 554:	c6 df       	rcall	.-116    	; 0x4e2 <push>
		number = number/10; 
 556:	c8 01       	movw	r24, r16
 558:	b7 01       	movw	r22, r14
 55a:	2a e0       	ldi	r18, 0x0A	; 10
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	24 d0       	rcall	.+72     	; 0x5ac <__divmodsi4>
 564:	c9 01       	movw	r24, r18
 566:	da 01       	movw	r26, r20
 568:	7c 01       	movw	r14, r24
 56a:	8d 01       	movw	r16, r26
	{	
		number = number * -1;
		data('-');
	}
		
	while(number > 0)
 56c:	e1 14       	cp	r14, r1
 56e:	f1 04       	cpc	r15, r1
 570:	01 05       	cpc	r16, r1
 572:	11 05       	cpc	r17, r1
 574:	31 f7       	brne	.-52     	; 0x542 <lcd_printnum+0x34>
		temp = number%10;
		temp += 0x30;
		push(temp);
		number = number/10; 
	}
	printstack();
 576:	37 de       	rcall	.-914    	; 0x1e6 <printstack>


}
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	08 95       	ret

00000582 <printnum>:
	lcd_data(val);
}

void printnum(long int number)
{
	lcd_printnum(number);
 582:	c5 df       	rcall	.-118    	; 0x50e <lcd_printnum>
}
 584:	08 95       	ret

00000586 <__divmodhi4>:
 586:	97 fb       	bst	r25, 7
 588:	09 2e       	mov	r0, r25
 58a:	07 26       	eor	r0, r23
 58c:	0a d0       	rcall	.+20     	; 0x5a2 <__divmodhi4_neg1>
 58e:	77 fd       	sbrc	r23, 7
 590:	04 d0       	rcall	.+8      	; 0x59a <__divmodhi4_neg2>
 592:	27 d0       	rcall	.+78     	; 0x5e2 <__udivmodhi4>
 594:	06 d0       	rcall	.+12     	; 0x5a2 <__divmodhi4_neg1>
 596:	00 20       	and	r0, r0
 598:	1a f4       	brpl	.+6      	; 0x5a0 <__divmodhi4_exit>

0000059a <__divmodhi4_neg2>:
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255

000005a0 <__divmodhi4_exit>:
 5a0:	08 95       	ret

000005a2 <__divmodhi4_neg1>:
 5a2:	f6 f7       	brtc	.-4      	; 0x5a0 <__divmodhi4_exit>
 5a4:	90 95       	com	r25
 5a6:	81 95       	neg	r24
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__divmodsi4>:
 5ac:	97 fb       	bst	r25, 7
 5ae:	09 2e       	mov	r0, r25
 5b0:	05 26       	eor	r0, r21
 5b2:	0e d0       	rcall	.+28     	; 0x5d0 <__divmodsi4_neg1>
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	04 d0       	rcall	.+8      	; 0x5c0 <__divmodsi4_neg2>
 5b8:	28 d0       	rcall	.+80     	; 0x60a <__udivmodsi4>
 5ba:	0a d0       	rcall	.+20     	; 0x5d0 <__divmodsi4_neg1>
 5bc:	00 1c       	adc	r0, r0
 5be:	38 f4       	brcc	.+14     	; 0x5ce <__divmodsi4_exit>

000005c0 <__divmodsi4_neg2>:
 5c0:	50 95       	com	r21
 5c2:	40 95       	com	r20
 5c4:	30 95       	com	r19
 5c6:	21 95       	neg	r18
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	4f 4f       	sbci	r20, 0xFF	; 255
 5cc:	5f 4f       	sbci	r21, 0xFF	; 255

000005ce <__divmodsi4_exit>:
 5ce:	08 95       	ret

000005d0 <__divmodsi4_neg1>:
 5d0:	f6 f7       	brtc	.-4      	; 0x5ce <__divmodsi4_exit>
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__udivmodhi4>:
 5e2:	aa 1b       	sub	r26, r26
 5e4:	bb 1b       	sub	r27, r27
 5e6:	51 e1       	ldi	r21, 0x11	; 17
 5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <__udivmodhi4_ep>

000005ea <__udivmodhi4_loop>:
 5ea:	aa 1f       	adc	r26, r26
 5ec:	bb 1f       	adc	r27, r27
 5ee:	a6 17       	cp	r26, r22
 5f0:	b7 07       	cpc	r27, r23
 5f2:	10 f0       	brcs	.+4      	; 0x5f8 <__udivmodhi4_ep>
 5f4:	a6 1b       	sub	r26, r22
 5f6:	b7 0b       	sbc	r27, r23

000005f8 <__udivmodhi4_ep>:
 5f8:	88 1f       	adc	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	5a 95       	dec	r21
 5fe:	a9 f7       	brne	.-22     	; 0x5ea <__udivmodhi4_loop>
 600:	80 95       	com	r24
 602:	90 95       	com	r25
 604:	bc 01       	movw	r22, r24
 606:	cd 01       	movw	r24, r26
 608:	08 95       	ret

0000060a <__udivmodsi4>:
 60a:	a1 e2       	ldi	r26, 0x21	; 33
 60c:	1a 2e       	mov	r1, r26
 60e:	aa 1b       	sub	r26, r26
 610:	bb 1b       	sub	r27, r27
 612:	fd 01       	movw	r30, r26
 614:	0d c0       	rjmp	.+26     	; 0x630 <__udivmodsi4_ep>

00000616 <__udivmodsi4_loop>:
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	ee 1f       	adc	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	a2 17       	cp	r26, r18
 620:	b3 07       	cpc	r27, r19
 622:	e4 07       	cpc	r30, r20
 624:	f5 07       	cpc	r31, r21
 626:	20 f0       	brcs	.+8      	; 0x630 <__udivmodsi4_ep>
 628:	a2 1b       	sub	r26, r18
 62a:	b3 0b       	sbc	r27, r19
 62c:	e4 0b       	sbc	r30, r20
 62e:	f5 0b       	sbc	r31, r21

00000630 <__udivmodsi4_ep>:
 630:	66 1f       	adc	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a 94       	dec	r1
 63a:	69 f7       	brne	.-38     	; 0x616 <__udivmodsi4_loop>
 63c:	60 95       	com	r22
 63e:	70 95       	com	r23
 640:	80 95       	com	r24
 642:	90 95       	com	r25
 644:	9b 01       	movw	r18, r22
 646:	ac 01       	movw	r20, r24
 648:	bd 01       	movw	r22, r26
 64a:	cf 01       	movw	r24, r30
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
